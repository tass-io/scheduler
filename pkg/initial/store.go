package init
import (
"context"
"errors"
"io/ioutil"

"github.com/go-redis/redis/v8"
)

var (
	address   string = "100.92.53.83:6379"
	password  string = ""
	defaultDb int    = 0
)

var rdb *redis.Client

func initRedis() {
	rdb = redis.NewClient(&redis.Options{
		Addr:     address,
		Password: password,
		DB:       defaultDb,
	})
}

// Set stores the function code by reading the path
// The key is generated by name and namespace
func Set(ns, name, path string) error {
	code, err := ioutil.ReadFile(path)
	if err != nil {
		return err
	}
	key := buildKey(ns, name)
	err = rdb.Set(context.Background(), key, code, 0).Err()
	return err
}

// Get gets the function source code by name and namespace
func Get(ns, name string) (string, error) {
	key := buildKey(ns, name)
	val, err := rdb.Get(context.Background(), key).Result()
	if err == redis.Nil {
		return "", errors.New(key + " does not exist")
	}
	return val, err
}

// Delete deletes the function source code by name and namespace
func Delete(ns, name string) error {
	key := buildKey(ns, name)
	return rdb.Del(context.Background(), key).Err()
}

// buildKey generates th Key by name and namespace
// e.g. ("name", "namespace") -> ("name:namespace")
func buildKey(ns, name string) string {
	return ns + ":" + name
}

func init() {
	initRedis()
}

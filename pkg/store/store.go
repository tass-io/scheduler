package store

import (
	"context"
	"errors"
	"sync"

	"github.com/go-redis/redis/v8"
	"github.com/spf13/viper"
	"github.com/tass-io/scheduler/pkg/env"
	"go.uber.org/zap"
)

var (
	address   string = "100.92.53.83:6379"
	password  string = ""
	defaultDb int    = 0
	rdb       *redis.Client
	once      = &sync.Once{}
)

// getrdb initializes a redis client
func getrdb() *redis.Client {
	once.Do(func() {
		zap.S().Debugw("get redis config from viper", "addr", viper.GetString(env.RedisIp)+":"+viper.GetString(env.RedisPort))
		rdb = redis.NewClient(&redis.Options{
			Addr:     viper.GetString(env.RedisIp) + ":" + viper.GetString(env.RedisPort),
			Password: viper.GetString(env.RedisPassword),
			DB:       viper.GetInt(env.DefaultDb),
		})
	})
	return rdb
}

// get gets the function source code by name and namespace
var Get = func(ns, name string) (string, error) {
	key := buildKey(ns, name)
	val, err := getrdb().Get(context.Background(), key).Result()
	if err == redis.Nil {
		return "", errors.New(key + " does not exist")
	}
	return val, err
}

// set stores the function code by reading the path
// The key is generated by name and namespace
var Set = func(ns, name, code string) error {
	key := buildKey(ns, name)
	err := getrdb().Set(context.Background(), key, code, 0).Err()
	return err
}

// buildKey generates th Key by name and namespace
// e.g. ("name", "namespace") -> ("name:namespace")
func buildKey(ns, name string) string {
	return ns + ":" + name
}
